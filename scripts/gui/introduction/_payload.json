[{"data":1,"prerenderedAt":61},["Reactive",2],{"search-api":3},[4,11,18,29,34,39,44,55],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","YAFLA - Yet Anothe Factorio Library Attempt",[],"    YAFLA   Yet Another Factorio Library Attempt",{"id":12,"path":13,"dir":7,"title":14,"description":7,"keywords":15,"body":17},"content:0.Start:0.index.md","/start","Introduction",[16],"Nothing there for now","   This library is still in development, if you find any bugs please report them on the   Mod portal .  Nothing there for now",{"id":19,"path":20,"dir":21,"title":22,"description":7,"keywords":23,"body":28},"content:1.Scripts:0.extended_table.md","/scripts/extended_table","scripts","Extended table",[24,25,26,27],"Include in your script","is_empty","is_present","slice","   Include in your script   local ext_table = require(\"__yafla__/scripts/extended_table.lua\")\n   is_empty   input:    table   output:    bool  v0.1.0  This function take in input a table and tells you if the table is empty or not!  Compared to   #Table > 0  This gives you   false  it you have a table that work as a   dict\\hashmap      local   my_empty_table   =   {}\n   local   my_not_empty_table   =   {something  =  10  }\n   local   my_not_empty_list   =   {  1  ,  2  ,  3  }\n   \n   ext_table.  is_empty  (my_table)   ->   true\n   ext_table.  is_empty  (my_not_empty_table)   ->   false\n   ext_table.  is_empty  (my_not_empty_list)   ->   false\n     function   extended_table  .  is_empty  (tbl)\n       if   #  tbl   >   0   then\n           return   false\n       end\n   \n       for   _, _   in   pairs  (tbl)   do\n           return   false\n       end\n   \n       return   true\n     end\n   is_present   input:    table ,   any   output:    bool  v0.1.0  This function take in input a table and a value and tells you if the element is present in the table!  This just avoid you to write the for loop each time...      local   my_table   =   {  1  ,  2  ,  3  }\n   \n   ext_table.  is_present  (my_table,   2  )   ->   true\n   ext_table.  is_present  (my_table,   4  )   ->   false\n     function   extended_table  .  is_present  (tbl, element)\n     for   _, v   in   pairs  (tbl)   do\n         if   v   ==   element   then\n             return   true\n         end\n     end\n     return   false\n   end\n   slice   input:    table ,   number|nil=1 ,   number|nil=#table ,   number|nil=1   output:    table  v0.1.0  This function take in input a table, first element of the slice, last element of the slice, step of the slice.  This just avoid you to write the for loop each time...      local   my_table   =   {  1  ,  2  ,  3  ,  4  ,  5  }\n   \n   ext_table.  slice  (my_table,   2  ,  4  )   ->   {  2  ,  3  ,  4  }\n   ext_table.  slice  (my_table,   3  ,  3  )   ->   {  3  }\n     local   my_table   =   {  1  ,  2  ,  3  ,  4  ,  5  }\n   \n   ext_table.  slice  (my_table,   5  ,   1  ,   -  1  )   ->   {  5  ,  4  ,  3  ,  2  ,  1  }\n     function   extended_table  .  slice  (tbl, first, last, step)\n     local   sliced   =   {}\n   \n     for   i   =   first   or   1  , last   or   #  tbl, step   or   1   do\n         sliced[  #  sliced  +  1  ]   =   tbl[i]\n     end\n   \n     return   sliced\n   end\n    \nThis function does   NOT  check if the input parameters are correct, so if you insert value that does not match yout table it will crash.  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":30,"path":31,"dir":32,"title":14,"description":7,"keywords":33,"body":7},"content:1.Scripts:1.gui:0.introduction.md","/scripts/gui/introduction","gui",[],{"id":35,"path":36,"dir":32,"title":37,"description":7,"keywords":38,"body":7},"content:1.Scripts:1.gui:1.gui_builder.md","/scripts/gui/gui_builder","Gui builder",[],{"id":40,"path":41,"dir":32,"title":42,"description":7,"keywords":43,"body":7},"content:1.Scripts:1.gui:2.gui_components.md","/scripts/gui/gui_components","Gui components",[],{"id":45,"path":46,"dir":21,"title":47,"description":7,"keywords":48,"body":54},"content:1.Scripts:2.actions.md","/scripts/actions","Actions",[24,49,50,51,52,53],"What is an action?","delay_action","loop_action","get_loop_action","stop_loop_action","   Include in your script   local actions = require(\"__yafla__/scripts/actions.lua\")\n   What is an action?   An action is simply a function that is called \"without\" a specific event.\nActions can be delayed to be executed after x tick or loopep each x tick.   delay_action   input:    number ,   function ,   number|nil   output:    nil  v0.1.0  This function takes in input a number (the delay), a function, the data to be passed to the function or nothing.      local   function   test  ()\n     print  (  \"Executed\"  )\n   end\n   \n   actions.  delay_action  (  10  , test)   ->   wait   10   tick   ->   \"Executed\"\n     function   actions  .  delay_action  (delay, action, custom_data)\n     local   tick   =   game.  tick   +   delay\n   \n     table.insert  (Actions_to_be_executed, {\n         tick   =   tick,\n         action   =   action,\n         data   =   custom_data\n     })\n   end\n   loop_action   input:    number ,   function ,   number|nil ,   any|nil   output:    string  v0.1.0  This function takes in input a number (the interval), a function, the last tick to be executed or nothing, the data to be passed to the function or nothing.\nIt return the action id.  \nFor now without a proper action_id ther's no way to get back or stop a loop action      local   function   test  ()\n     print  (  \"Executed\"  )\n   end\n   \n   actions.  loop_action  (  10  , test)   ->   wait   10   tick   ->   \"Executed\"   ->   wait   10   tick   ...\n    \nIf you want to pass parameters to the function but do not want the function to stop due to   last_execution_tick  set   last_execution_tick  to -1     function   actions  .  loop_action  (interval, action, last_execution_tick, custom_data)\n     local   action_id   =   tostring  (game.  tick  )  ..  \"_\"  ..  tostring  (  #  Actions_to_be_looped)\n   \n     Actions_to_be_looped[action_id]   =   {\n         next_execution   =   game.  tick   +   interval,\n         last_execution_tick   =   last_execution_tick   or   -  1  ,\n         interval   =   interval,\n         action   =   action,\n         data   =   custom_data,\n     }\n     return   action_id\n   end\n   get_loop_action   input:    string   output:    table  v0.1.0  This function takes in input a string, the action id of a loop_action and gives back the data of the loop_action.  \nFor now without a proper action_id there's no way to get back or stop a loop action      local   action   =   actions.  get_loop_action  (  \"10_1\"  )\n   action   =   {\n     next_execution   =   number,\n     last_execution_tick   =   number,\n     interval   =   number,\n     action   =   function,\n     data   =   any,\n   }\n     function   actions  .  get_loop_action  (action_id)\n     if   Actions_to_be_looped[action_id]   then\n         return   Actions_to_be_looped[action_id]\n     end\n     return   nil\n   end\n   stop_loop_action   input:    string   output:    nil  v0.1.0  This function takes in input a string, the action id of a loop_action and stops it without running the action.  \nFor now without a proper action_id there's no way to get back or stop a loop action      actions.  stop_loop_action  (  \"10_1\"  )   ->   Stop action\n     function   actions  .  stop_loop_action  (action_id)\n     if   Actions_to_be_looped[action_id]   then\n         Actions_to_be_looped[action_id]   =   nil\n     end\n   end\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":56,"path":57,"dir":58,"title":59,"description":7,"keywords":60,"body":7},"content:2.Prototypes:0.styles.md","/prototypes/styles","prototypes","Styles",[],1705097376579]